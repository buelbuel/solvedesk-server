var _e=Object.create;var At=Object.defineProperty;var Ke=Object.getOwnPropertyDescriptor;var Qe=Object.getOwnPropertyNames;var Xe=Object.getPrototypeOf,Ye=Object.prototype.hasOwnProperty;var Ze=(s,e,t,r)=>{if(e&&typeof e=="object"||typeof e=="function")for(let o of Qe(e))!Ye.call(s,o)&&o!==t&&At(s,o,{get:()=>e[o],enumerable:!(r=Ke(e,o))||r.enumerable});return s};var y=(s,e,t)=>(t=s!=null?_e(Xe(s)):{},Ze(e||!s||!s.__esModule?At(t,"default",{value:s,enumerable:!0}):t,s));var We=y(require("express"),1),Rt=y(require("body-parser"),1),Fe=y(require("cors"),1),He=y(require("helmet"),1);var ve=require("express");var bt=require("express");var Ut=y(require("jsonwebtoken"),1);var St=y(require("pg"),1),Nt=y(require("dotenv"),1);Nt.default.config();var{Pool:De}=St.default,tr=new De({host:process.env.PG_HOST,port:parseInt(process.env.PG_PORT),user:process.env.PG_USERNAME,password:process.env.PG_PASSWORD,database:process.env.PG_DATABASE}),i=tr;var J=y(require("jsonwebtoken"),1),V=y(require("bcrypt"),1),Ct=require("uuid");var Y=y(require("bcrypt"),1),Z=class{constructor(e,t,r,o,a,n,d,u,p){this.id=e,this.email=t,this.firstName=r,this.lastName=o,this.role=a,this.password=n,this.createdAt=d,this.updatedAt=u,this.deletedAt=p,this.hashPassword()}hashPassword(){this.password=Y.default.hashSync(this.password,8)}checkIfUnencryptedPasswordIsValid(e){return Y.default.compareSync(e,this.password)}},w=Z;var cr=require("dotenv/config"),D=class{constructor(e,t,r,o){this.email=e,this.password=t,this.firstName=r,this.lastName=o}validate(){let e=[];return(!this.email||!/\S+@\S+\.\S+/.test(this.email))&&e.push("Invalid email"),(!this.password||this.password.length<6||this.password.length>20)&&e.push("Password must be between 6 and 20 characters"),this.firstName||e.push("First name is required"),this.lastName||e.push("Last name is required"),e}},E=class{constructor(){this.jwtSecret=process.env.JWT_SECRET}async registerUser(e){let r=new D(e.email,e.password,e.firstName,e.lastName).validate();if(r.length>0)throw new Error(r.join(", "));let o=V.default.hashSync(e.password,8),{rows:a}=await i.query("INSERT INTO users (id, email, password, firstName, lastName) VALUES ($1, $2, $3, $4, $5) RETURNING *",[(0,Ct.v4)(),e.email,o,e.firstName,e.lastName]),n=a[0];return new w(n.id,n.email,n.firstName,n.lastName,n.role,n.password,n.createdAt,n.updatedAt,n.deletedAt)}async authenticateUser(e,t){let{rows:r}=await i.query("SELECT * FROM public.user WHERE email = $1",[e]),o=r[0];if(!o||!V.default.compareSync(t,o.password))throw new Error("Invalid email or password");let a=new w(o.id,o.email,o.firstName,o.lastName,o.role,o.password,o.createdAt,o.updatedAt,o.deletedAt);return J.default.sign({userId:a.id},this.jwtSecret,{expiresIn:"1h"})}async refreshToken(e){try{let t=J.default.verify(e,this.jwtSecret);return J.default.sign({userId:t.userId},this.jwtSecret,{expiresIn:"1h"})}catch(t){throw new Error("Invalid or expired token: ",t)}}async resetPassword(e,t){let{rows:r}=await i.query("SELECT * FROM users WHERE email = $1",[e]);if(!r[0])throw new Error("User not found");let a=V.default.hashSync(t,8);await i.query("UPDATE users SET password = $1 WHERE email = $2",[a,e])}};var mr=require("dotenv/config"),er=new E,c=async(s,e,t)=>{let r=s.headers.authorization;if(!r)return e.status(401).send("Access token not provided");try{let o=process.env.JWT_SECRET;Ut.default.verify(r,o),t()}catch(o){if(o.name==="TokenExpiredError")try{let a=s.headers["x-refresh-token"];if(!a)return e.status(401).send("Refresh token not provided");let n=await er.refreshToken(a);e.setHeader("x-access-token",n),t()}catch(a){return e.status(401).send("Unable to refresh access token: ",a)}else return e.status(401).send("Invalid access token")}};var _=new E,It=async(s,e)=>{try{let t=await _.registerUser(s.body);e.status(201).json(t)}catch(t){e.status(400).json({error:t.message})}},$t=async(s,e)=>{let{email:t,password:r}=s.body;try{let o=await _.authenticateUser(t,r);e.json({accessToken:o})}catch(o){console.error("Authentication error:",o),e.status(401).json({error:o.message})}},jt=async(s,e)=>{let{token:t}=s.body;try{let r=await _.refreshToken(t);e.json({token:r})}catch(r){console.error("Refresh token error:",r),e.status(401).json({error:r.message})}},xt=async(s,e)=>{let{email:t,newPassword:r}=s.body;try{await _.resetPassword(t,r),e.status(200).json({message:"Password reset successful"})}catch(o){console.error("Reset password error:",o),e.status(400).json({error:o.message})}};var U=(0,bt.Router)();U.post("/register",It);U.post("/login",$t);U.post("/refresh-token",jt);U.post("/reset-password",[c],xt);var Ot=U;var Lt=require("express");var tt=class{constructor(e,t,r,o,a,n,d,u,p,l,h){this.id=e,this.name=t,this.billingStreet=r,this.billingCode=o,this.billingCity=a,this.billingState=n,this.billingCountry=d,this.updatedAt=u,this.users=p,this.tickets=l,this.updatedBy=h}},I=tt;var $=class{async createOrganization(e){let{rows:t}=await i.query("INSERT INTO organizations (name, billingStreet, billingCode, billingCity, billingState, billingCountry) VALUES ($1, $2, $3, $4, $5, $6) RETURNING *",[e.name,e.billingStreet,e.billingCode,e.billingCity,e.billingState,e.billingCountry]),r=t[0];return new I(r.id,r.name,r.billingStreet,r.billingCode,r.billingCity,r.billingState,r.billingCountry,r.createdAt,r.updatedAt,r.updatedBy)}async getOrganizations(){let{rows:e}=await i.query("SELECT * FROM organizations");return e.map(t=>new I(t.id,t.name,t.billingStreet,t.billingCode,t.billingCity,t.billingState,t.billingCountry,t.createdAt,t.updatedAt,t.updatedBy))}async getOrganizationById(e){let{rows:t}=await i.query("SELECT * FROM organizations WHERE id = $1",[e]);return new I(...t[0])}async updateOrganization(e,t){let{rows:r}=await i.query("UPDATE organizations SET name = $1 WHERE id = $2 RETURNING *",[t.name,e]);return new I(...r[0])}async deleteOrganization(e){await i.query("DELETE FROM organizations WHERE id = $1",[e])}};var qt=new $,Pt=async(s,e)=>{try{let t=await qt.createOrganization(s.body);e.status(201).json(t)}catch(t){e.status(400).json({error:t.message})}},vt=async(s,e)=>{try{let t=await qt.getOrganizations();e.status(200).json(t)}catch(t){e.status(400).json({error:t.message})}};var et=(0,Lt.Router)();et.post("/",Pt);et.get("/",vt);var Mt=et;var Bt=require("express");var rt=class{constructor(e,t,r,o,a,n,d,u,p,l,h,T,k,R,A,S,N,C,X){this.id=e,this.subject=t,this.description=r,this.email=o,this.ticketNumber=a,this.resolvedAt=n,this.createdAt=d,this.updatedAt=u,this.deletedAt=p,this.contact=l,this.priority=h,this.category=T,this.type=k,this.status=R,this.organization=A,this.assignedTo=S,this.closedBy=N,this.createdBy=C,this.updatedBy=X}},K=rt;var j=class{async createTicket(e){let{title:t,description:r,status:o,priority:a,assigneeId:n}=e,{rows:d}=await i.query("INSERT INTO tickets (title, description, status, priority, assigneeId) VALUES ($1, $2, $3, $4, $5) RETURNING *",[t,r,o,a,n]),u=d[0];return new K(u.id,u.title,u.description,u.status,u.priority,u.assigneeId,u.createdAt,u.updatedAt,u.deletedAt)}async getTickets(e=1,t=20){let r=(e-1)*t,{rows:o}=await i.query("SELECT * FROM public.ticket LIMIT $1 OFFSET $2",[t,r]),{rows:[{count:a}]}=await i.query("SELECT COUNT(*) FROM tickets"),n=Math.ceil(a/t);return{tickets:o,totalPages:n}}async getTicketById(e){let{rows:t}=await i.query("SELECT * FROM tickets WHERE id = $1",[e]);return new K(...t[0])}async updateTicket(e,t){let{rows:r}=await i.query("UPDATE tickets SET title = $1 WHERE id = $2 RETURNING *",[t.title,e]);return new K(...r[0])}async deleteTicket(e){await i.query("DELETE FROM tickets WHERE id = $1",[e])}};var Wt=new j,Ft=async(s,e)=>{try{let t=await Wt.createTicket(s.body);e.status(201).json(t)}catch(t){e.status(500).json({error:t.message})}},Ht=async(s,e)=>{try{let t=parseInt(s.query.page)||1,r=parseInt(s.query.pageSize)||20,{tickets:o,totalPages:a}=await Wt.getTickets(t,r);e.status(200).json({tickets:o,totalPages:a})}catch(t){e.status(500).json({error:t.message})}};var st=(0,Bt.Router)();st.post("/",[c],Ft);st.get("/",[c],Ht);var ot=st;var _t=require("express");var x=class{async getUsers(){let{rows:e}=await i.query("SELECT * FROM users");return e.map(t=>new w(t.id,t.email,t.firstName,t.lastName,t.role,t.password,t.createdAt,t.updatedAt,t.deletedAt))}async getOneById(e){let{rows:t}=await i.query("SELECT * FROM users WHERE id = $1",[e]),r=t[0];if(!r)throw new Error("User not found");return new w(r.id,r.email,r.firstName,r.lastName,r.role,r.password,r.createdAt,r.updatedAt,r.deletedAt)}async editUser(e,t){let{rows:r}=await i.query("UPDATE users SET email = $1, firstName = $2, lastName = $3, role = $4, updatedAt = NOW() WHERE id = $5 RETURNING *",[t.email,t.firstName,t.lastName,t.role,e]),o=r[0];if(!o)throw new Error("User not found");return new w(o.id,o.email,o.firstName,o.lastName,o.role,o.password,o.createdAt,o.updatedAt,o.deletedAt)}async deleteUser(e){if((await i.query("DELETE FROM users WHERE id = $1",[e])).rowCount===0)throw new Error("User not found")}};var Q=new x,zt=async(s,e)=>{try{let t=await Q.getUsers();e.status(200).json(t)}catch(t){e.status(500).json({error:t.message})}},Gt=async(s,e)=>{try{let t=await Q.getUserById(s.params.id);if(!t)return e.status(404).json({error:"User not found"});e.status(200).json(t)}catch(t){e.status(500).json({error:t.message})}},Jt=async(s,e)=>{try{let t=await Q.editUser(s.params.id,s.body);e.status(200).json(t)}catch(t){e.status(500).json({error:t.message})}},Vt=async(s,e)=>{try{await Q.deleteUser(s.params.id),e.status(204).send()}catch(t){e.status(500).json({error:t.message})}};var it=s=>(e,t,r)=>{let o=e.user.role;s.includes(o)?r():t.status(403).send("Forbidden")};var b=(0,_t.Router)();b.get("/",[c],zt);b.get("/:id",[c],Gt);b.patch("/:id",[c,it(["ADMIN"])],Jt);b.delete("/:id",[c,it(["ADMIN"])],Vt);var at=b;var Yt=require("express");var nt=class{constructor(e,t,r,o,a,n,d,u,p,l,h,T,k,R,A,S,N,C,X,Ge,Je,Ve){this.id=e,this.name=t,this.description=r,this.billingStreet=o,this.billingCity=a,this.billingCode=n,this.billingState=d,this.billingCountry=u,this.mailingStreet=p,this.mailingCity=l,this.mailingCode=h,this.mailingState=T,this.mailingCountry=k,this.website=R,this.phone=A,this.createdAt=S,this.updatedAt=N,this.deletedAt=C,this.assignedTo=X,this.contacts=Ge,this.createdBy=Je,this.updatedBy=Ve}},O=nt;var q=class{async createAccount(e){try{let{rows:t}=await i.query("INSERT INTO accounts (name, industry, website) VALUES ($1, $2, $3) RETURNING *",[e.name,e.industry,e.website]),r=t[0];return new O(r.id,r.name,r.industry,r.website,r.createdAt,r.updatedAt,r.deletedAt)}catch(t){throw new Error(`Error creating account: ${t.message}`)}}async getAccounts(){try{let{rows:e}=await i.query("SELECT * FROM accounts");return e.map(t=>new O(t.id,t.name,t.industry,t.website,t.createdAt,t.updatedAt,t.deletedAt))}catch(e){throw new Error(`Error fetching accounts: ${e.message}`)}}async getAccountById(e){let{rows:t}=await i.query("SELECT * FROM accounts WHERE id = $1",[e]);return new O(...t[0])}async updateAccount(e,t){let{rows:r}=await i.query("UPDATE accounts SET name = $1 WHERE id = $2 RETURNING *",[t.name,e]);return new O(...r[0])}async deleteAccount(e){await i.query("DELETE FROM accounts WHERE id = $1",[e])}};var Kt=new q,Qt=async(s,e)=>{try{let t=await Kt.createAccount(s.body);e.status(201).json(t)}catch(t){e.status(400).json({error:t.message})}},Xt=async(s,e)=>{try{let t=await Kt.getAccounts();e.status(200).json(t)}catch(t){e.status(400).json({error:t.message})}};var ct=(0,Yt.Router)();ct.post("/",[c],Qt);ct.get("/",[c],Xt);var Zt=ct;var re=require("express");var ut=class{constructor(e,t,r,o,a,n,d,u,p,l,h,T,k,R,A,S,N,C){this.id=e,this.account=t,this.assignedTo=r,this.firstName=o,this.lastName=a,this.phone=n,this.mobile=d,this.email=u,this.role=p,this.createdAt=l,this.updatedAt=h,this.deletedAt=T,this.tickets=k,this.title=R,this.description=A,this.salutation=S,this.createdBy=N,this.updatedBy=C}},P=ut;var f=class{async createContact(e){let{rows:t}=await i.query("INSERT INTO contacts (firstName, lastName, email, phone, accountId) VALUES ($1, $2, $3, $4, $5) RETURNING *",[e.firstName,e.lastName,e.email,e.phone,e.accountId]),r=t[0];return new P(r.id,r.firstName,r.lastName,r.email,r.phone,r.accountId,r.createdAt,r.updatedAt,r.deletedAt)}async getContacts(){let{rows:e}=await i.query("SELECT * FROM contacts");return e.map(t=>new P(t.id,t.firstName,t.lastName,t.email,t.phone,t.accountId,t.createdAt,t.updatedAt,t.deletedAt))}async getContactById(e){let{rows:t}=await i.query("SELECT * FROM contacts WHERE id = $1",[e]);return new P(...t[0])}async updateContact(e,t){let{rows:r}=await i.query("UPDATE contacts SET name = $1 WHERE id = $2 RETURNING *",[t.name,e]);return new P(...r[0])}async deleteContact(e){await i.query("DELETE FROM contacts WHERE id = $1",[e])}};var Dt=new f,te=async(s,e)=>{try{let t=await Dt.createContact(s.body);e.status(201).json(t)}catch(t){e.status(400).json({error:t.message})}},ee=async(s,e)=>{try{let t=await Dt.getContacts();e.status(200).json(t)}catch(t){e.status(400).json({error:t.message})}};var dt=(0,re.Router)();dt.post("/",[c],te);dt.get("/",[c],ee);var se=dt;var ue=require("express");var oe=y(require("jsonwebtoken"),1),ds=require("dotenv/config");var ie=require("uuid"),rr=require("dotenv");var mt=class{constructor(e){this.userId=e}isValid(){return(0,ie.validate)(this.userId)}},v=class{constructor(){this.jwtSecret=process.env.JWT_SECRET}async getCurrentUser(e){try{let t=oe.default.verify(e,this.jwtSecret),r=new mt(t.userId);if(!r.isValid())throw new Error("Invalid user ID format");let{rows:o}=await i.query("SELECT * FROM users WHERE id = $1",[r.userId]),a=o[0];if(!a)throw new Error("User not found");return new w(a.id,a.email,a.firstName,a.lastName,a.role,a.password,a.createdAt,a.updatedAt,a.deletedAt)}catch(t){throw new Error("Error fetching current user: ",t)}}async updateCurrentUser(e,t){throw new Error("Not implemented: ",e,t)}async deleteCurrentUser(e){throw new Error("Not implemented: ",e)}};var ae=new v,ne=async(s,e)=>{let t=s.headers.authorization;if(!t)return e.status(401).json({error:"Access token not provided"});try{let r=await ae.getCurrentUser(t);if(!r)return e.status(404).json({error:"User not found"});e.json(r)}catch(r){e.status(500).json({error:r.message})}},ce=async(s,e)=>{let t=s.headers.authorization;if(!t)return e.status(401).json({error:"Access token not provided"});try{let r=await ae.updateCurrentUser(t,s.body);e.json(r)}catch(r){e.status(500).json({error:r.message})}};var pt=(0,ue.Router)();pt.get("/",[c],ne);pt.patch("/",[c],ce);var de=pt;var ye=require("express");var lt=class{constructor(e,t,r,o,a,n,d,u,p,l){this.id=e,this.name=t,this.description=r,this.ticketTypes=o,this.tickets=a,this.createdAt=n,this.updatedAt=d,this.deletedAt=u,this.createdBy=p,this.updatedBy=l}},L=lt;var M=class{async createTicketCategory(e){let{rows:t}=await i.query("INSERT INTO ticketCategories (name) VALUES ($1) RETURNING *",[e.name]),r=t[0];return new L(r.id,r.name,r.createdAt,r.updatedAt,r.deletedAt)}async getTicketCategories(){let{rows:e}=await i.query("SELECT * FROM ticketCategories");return e.map(t=>new L(t.id,t.name,t.createdAt,t.updatedAt,t.deletedAt))}async getTicketCategoryById(e){let{rows:t}=await i.query("SELECT * FROM ticketCategories WHERE id = $1",[e]);return new L(...t[0])}async updateTicketCategory(e,t){let{rows:r}=await i.query("UPDATE ticketCategories SET name = $1 WHERE id = $2 RETURNING *",[t.name,e]);return new L(...r[0])}async deleteTicketCategory(e){await i.query("DELETE FROM ticketCategories WHERE id = $1",[e])}};var me=new M,pe=async(s,e)=>{try{let t=await me.createTicketCategory(s.body);e.status(201).json(t)}catch(t){e.status(400).json({error:t.message})}},le=async(s,e)=>{try{let t=await me.getTicketCategories();e.status(200).json(t)}catch(t){e.status(400).json({error:t.message})}};var yt=(0,ye.Router)();yt.post("/",[c],pe);yt.get("/",[c],le);var we=yt;var ge=require("express");var wt=class{constructor(e,t,r,o,a,n,d,u){this.id=e,this.name=t,this.tickets=r,this.createdAt=o,this.updatedAt=a,this.deletedAt=n,this.createdBy=d,this.updatedBy=u}},W=wt;var F=class{async createTicketPriority(e){let{rows:t}=await i.query("INSERT INTO ticketPriorities (name) VALUES ($1) RETURNING *",[e.name]),r=t[0];return new W(r.id,r.name,r.createdAt,r.updatedAt,r.deletedAt)}async getTicketPriorities(){let{rows:e}=await i.query("SELECT * FROM ticketPriorities");return e.map(t=>new W(t.id,t.name,t.createdAt,t.updatedAt,t.deletedAt))}async getTicketPriorityById(e){let{rows:t}=await i.query("SELECT * FROM ticketPriorities WHERE id = $1",[e]);return new W(...t[0])}async updateTicketPriority(e,t){let{rows:r}=await i.query("UPDATE ticketPriorities SET name = $1 WHERE id = $2 RETURNING *",[t.name,e]);return new W(...r[0])}async deleteTicketPriority(e){await i.query("DELETE FROM ticketPriorities WHERE id = $1",[e])}};var he=new F,Ee=async(s,e)=>{try{let t=await he.createTicketPriority(s.body);e.status(201).json(t)}catch(t){e.status(400).json({error:t.message})}},fe=async(s,e)=>{try{let t=await he.getTicketPriorities();e.status(200).json(t)}catch(t){e.status(400).json({error:t.message})}};var ht=(0,ge.Router)();ht.post("/",[c],Ee);ht.get("/",[c],fe);var Te=ht;var Se=require("express");var Et=class{constructor(e,t,r,o,a,n,d,u){this.id=e,this.name=t,this.tickets=r,this.createdAt=o,this.updatedAt=a,this.deletedAt=n,this.createdBy=d,this.updatedBy=u}},H=Et;var B=class{async createTicketStatus(e){let{rows:t}=await i.query("INSERT INTO ticketStatuses (name) VALUES ($1) RETURNING *",[e.name]),r=t[0];return new H(r.id,r.name,r.createdAt,r.updatedAt,r.deletedAt)}async getTicketStatuses(){let{rows:e}=await i.query("SELECT * FROM ticketStatuses");return e.map(t=>new H(t.id,t.name,t.createdAt,t.updatedAt,t.deletedAt))}async getTicketStatusById(e){let{rows:t}=await i.query("SELECT * FROM ticketStatuses WHERE id = $1",[e]);return new H(...t[0])}async updateTicketStatus(e,t){let{rows:r}=await i.query("UPDATE ticketStatuses SET name = $1 WHERE id = $2 RETURNING *",[t.name,e]);return new H(...r[0])}async deleteTicketStatus(e){await i.query("DELETE FROM ticketStatuses WHERE id = $1",[e])}};var ke=new B,Re=async(s,e)=>{try{let t=await ke.createTicketStatus(s.body);e.status(201).json(t)}catch(t){e.status(400).json({error:t.message})}},Ae=async(s,e)=>{try{let t=await ke.getTicketStatuses();e.status(200).json(t)}catch(t){e.status(400).json({error:t.message})}};var ft=(0,Se.Router)();ft.post("/",[c],Re);ft.get("/",[c],Ae);var Ne=ft;var $e=require("express");var gt=class{constructor(e,t,r,o,a,n,d,u,p,l){this.id=e,this.name=t,this.description=r,this.ticketCategory=o,this.tickets=a,this.createdAt=n,this.updatedAt=d,this.deletedAt=u,this.createdBy=p,this.updatedBy=l}},z=gt;var G=class{async createTicketType(e){let{rows:t}=await i.query("INSERT INTO ticketTypes (name) VALUES ($1) RETURNING *",[e.name]),r=t[0];return new z(r.id,r.name,r.createdAt,r.updatedAt,r.deletedAt)}async getTicketTypes(){let{rows:e}=await i.query("SELECT * FROM ticketTypes");return e.map(t=>new z(t.id,t.name,t.createdAt,t.updatedAt,t.deletedAt))}async getTicketTypeById(e){let{rows:t}=await i.query("SELECT * FROM ticketTypes WHERE id = $1",[e]);return new z(...t[0])}async updateTicketType(e,t){let{rows:r}=await i.query("UPDATE ticketTypes SET name = $1 WHERE id = $2 RETURNING *",[t.name,e]);return new z(...r[0])}async deleteTicketType(e){await i.query("DELETE FROM ticketTypes WHERE id = $1",[e])}};var Ce=new G,Ue=async(s,e)=>{try{let t=await Ce.createTicketType(s.body);e.status(201).json(t)}catch(t){e.status(400).json({error:t.message})}},Ie=async(s,e)=>{try{let t=await Ce.getTicketTypes();e.status(200).json(t)}catch(t){e.status(400).json({error:t.message})}};var Tt=(0,$e.Router)();Tt.post("/",[c],Ue);Tt.get("/",[c],Ie);var je=Tt;var qe=require("express");var xe=new f,be=async(s,e)=>{try{let t=await xe.createContactSalutation(s.body);e.status(201).json(t)}catch(t){e.status(400).json({error:t.message})}},Oe=async(s,e)=>{try{let t=await xe.getContactSalutations();e.status(200).json(t)}catch(t){e.status(400).json({error:t.message})}};var kt=(0,qe.Router)();kt.post("/",[c],be);kt.get("/",[c],Oe);var Pe=kt;var m=(0,ve.Router)();m.use("/auth",Ot);m.use("/organizations",Mt);m.use("/tickets",ot);m.use("/users",at);m.use("/profile",de);m.use("/accounts",Zt);m.use("/contacts",se);m.use("/contact-salutations",Pe);m.use("/ticket-categories",we);m.use("/tickets",ot);m.use("/users",at);m.use("/ticket-priorities",Te);m.use("/ticket-statuses",Ne);m.use("/ticket-types",je);var Le=m;var Be=require("dotenv"),ze=require("events");(0,Be.configDotenv)();ze.EventEmitter.defaultMaxListeners=20;var g=(0,We.default)(),Me=process.env.PORT||3e3;g.use((0,Fe.default)({origin:"http://localhost:5173",credentials:!0,optionsSuccessStatus:200}));g.use((0,He.default)());g.use(Rt.default.json());g.use(Rt.default.urlencoded({extended:!0}));g.use("/api",Le);g.listen(Me,()=>{console.log("Server is running on port:",Me)});
